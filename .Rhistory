#data frame assigning identities to each cell
CellsClusters <- data.frame(
Cell = names(Idents(objectrds)),
CellType = as.character(Idents(objectrds)),
stringsAsFactors = FALSE
)
#calculation progeny, added as inactive assay to rds
objectrds <- progeny(objectrds, scale = F, organism = "Human", top = features, perm = 1, return_assay = TRUE)
#We can now directly apply Seurat functions, like scaling our Progeny scores
objectrds <- Seurat::ScaleData(objectrds, assay = "progeny")
#We transform Progeny scores into a data frame to better handling the results
progeny_scores_df <- as.data.frame(t(GetAssayData(
objectrds,
slot = "scale.data",
assay = "progeny"
))) %>%
rownames_to_column("Cell") %>%
gather(Pathway, Activity,-Cell) #transforms the table into a longer table format - assigning a separate row for every pathways + coordinating activity per cell
#We match Progeny scores with the cell clusters.
progeny_scores_df <- inner_join(progeny_scores_df, CellsClusters)
#We summarize the Progeny scores by cell population
summarized_progeny_scores <- progeny_scores_df %>%
group_by(Pathway, CellType) %>%
summarise(avg = mean(Activity), std = sd(Activity))
#We prepare the data for the plot
summarized_progeny_scores_df <- summarized_progeny_scores %>%
dplyr::select(-std) %>%
spread(Pathway, avg) %>%
data.frame(row.names = "CellType", check.names = FALSE, stringsAsFactors = FALSE)
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
# #we prepare the plot
# nr = nrow(summarized_progeny_scores_df) / 2
# df1 = summarized_progeny_scores_df[1:nr, ]
# df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
# summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = pathway_order, cluster_cols = colorder, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity relative to Healthy"))
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
# #we prepare the plot
# nr = nrow(summarized_progeny_scores_df) / 2
# df1 = summarized_progeny_scores_df[1:nr, ]
# df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
# summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity relative to Healthy"))
progeny_hmap
colorder <- c("HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum", "AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum")
colorder
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
View(summarized_progeny_scores_df)
pathway_order
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
progeny_hmap
features <- 2000
colorder <- c("HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum", "AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum")
pathway_order <- c("Estrogen", "MAPK", "VEGF", "EGFR", "PI3K", "JAK-STAT", "WNT", 'Androgen', 'TGFb', 'NFkB', 'TNFa', "p53", "Hypoxia", "Trail")
objectrds <- roj_rds
Idents(objectrds) <-  paste0(objectrds$disease,"_",objectrds$svm_annotation)
colorder <- x
require(progeny)
require(pheatmap)
require(tidyr)
require(tibble)
#data frame assigning identities to each cell
CellsClusters <- data.frame(
Cell = names(Idents(objectrds)),
CellType = as.character(Idents(objectrds)),
stringsAsFactors = FALSE
)
#calculation progeny, added as inactive assay to rds
objectrds <- progeny(objectrds, scale = F, organism = "Human", top = features, perm = 1, return_assay = TRUE)
#We can now directly apply Seurat functions, like scaling our Progeny scores
objectrds <- Seurat::ScaleData(objectrds, assay = "progeny")
#We transform Progeny scores into a data frame to better handling the results
progeny_scores_df <- as.data.frame(t(GetAssayData(
objectrds,
slot = "scale.data",
assay = "progeny"
))) %>%
rownames_to_column("Cell") %>%
gather(Pathway, Activity,-Cell) #transforms the table into a longer table format - assigning a separate row for every pathways + coordinating activity per cell
#We match Progeny scores with the cell clusters.
progeny_scores_df <- inner_join(progeny_scores_df, CellsClusters)
#We summarize the Progeny scores by cell population
summarized_progeny_scores <- progeny_scores_df %>%
group_by(Pathway, CellType) %>%
summarise(avg = mean(Activity), std = sd(Activity))
#We prepare the data for the plot
summarized_progeny_scores_df <- summarized_progeny_scores %>%
dplyr::select(-std) %>%
spread(Pathway, avg) %>%
data.frame(row.names = "CellType", check.names = FALSE, stringsAsFactors = FALSE)
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
# #we prepare the plot
# nr = nrow(summarized_progeny_scores_df) / 2
# df1 = summarized_progeny_scores_df[1:nr, ]
# df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
# summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
progeny_hmap
progeny_hmap
colorder <- c("HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum", "AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum")
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
# #we prepare the plot
# nr = nrow(summarized_progeny_scores_df) / 2
# df1 = summarized_progeny_scores_df[1:nr, ]
# df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
# summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
progeny_hmap
features <- 2000
colorder <- c("HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum", "AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum")
pathway_order <- c("Estrogen", "MAPK", "VEGF", "EGFR", "PI3K", "JAK-STAT", "WNT", 'Androgen', 'TGFb', 'NFkB', 'TNFa', "p53", "Hypoxia", "Trail")
objectrds <- roj_rds
Idents(objectrds) <-  paste0(objectrds$disease,"_",objectrds$svm_annotation)
colorder <- x
require(progeny)
require(pheatmap)
require(tidyr)
require(tibble)
#data frame assigning identities to each cell
CellsClusters <- data.frame(
Cell = names(Idents(objectrds)),
CellType = as.character(Idents(objectrds)),
stringsAsFactors = FALSE
)
#calculation progeny, added as inactive assay to rds
objectrds <- progeny(objectrds, scale = F, organism = "Human", top = features, perm = 1, return_assay = TRUE)
#We can now directly apply Seurat functions, like scaling our Progeny scores
objectrds <- Seurat::ScaleData(objectrds, assay = "progeny")
#We transform Progeny scores into a data frame to better handling the results
progeny_scores_df <- as.data.frame(t(GetAssayData(
objectrds,
slot = "scale.data",
assay = "progeny"
))) %>%
rownames_to_column("Cell") %>%
gather(Pathway, Activity,-Cell) #transforms the table into a longer table format - assigning a separate row for every pathways + coordinating activity per cell
#We match Progeny scores with the cell clusters.
progeny_scores_df <- inner_join(progeny_scores_df, CellsClusters)
#We summarize the Progeny scores by cell population
summarized_progeny_scores <- progeny_scores_df %>%
group_by(Pathway, CellType) %>%
summarise(avg = mean(Activity), std = sd(Activity))
#We prepare the data for the plot
summarized_progeny_scores_df <- summarized_progeny_scores %>%
dplyr::select(-std) %>%
spread(Pathway, avg) %>%
data.frame(row.names = "CellType", check.names = FALSE, stringsAsFactors = FALSE)
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
# #we prepare the plot
# nr = nrow(summarized_progeny_scores_df) / 2
# df1 = summarized_progeny_scores_df[1:nr, ]
# df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
# summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
progeny_hmap
progeny_hmap
features <- 2000
colorder <- c("HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum", "AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum")
pathway_order <- c("Estrogen", "MAPK", "VEGF", "EGFR", "PI3K", "JAK-STAT", "WNT", 'Androgen', 'TGFb', 'NFkB', 'TNFa', "p53", "Hypoxia", "Trail")
objectrds <- roj_rds
Idents(objectrds) <-  paste0(objectrds$disease,"_",objectrds$svm_annotation)
colorder <- x
require(progeny)
require(pheatmap)
require(tidyr)
require(tibble)
#data frame assigning identities to each cell
CellsClusters <- data.frame(
Cell = names(Idents(objectrds)),
CellType = as.character(Idents(objectrds)),
stringsAsFactors = FALSE
)
#calculation progeny, added as inactive assay to rds
objectrds <- progeny(objectrds, scale = F, organism = "Human", top = features, perm = 1, return_assay = TRUE)
#We can now directly apply Seurat functions, like scaling our Progeny scores
objectrds <- Seurat::ScaleData(objectrds, assay = "progeny")
#We transform Progeny scores into a data frame to better handling the results
progeny_scores_df <- as.data.frame(t(GetAssayData(
objectrds,
slot = "scale.data",
assay = "progeny"
))) %>%
rownames_to_column("Cell") %>%
gather(Pathway, Activity,-Cell) #transforms the table into a longer table format - assigning a separate row for every pathways + coordinating activity per cell
#We match Progeny scores with the cell clusters.
progeny_scores_df <- inner_join(progeny_scores_df, CellsClusters)
#We summarize the Progeny scores by cell population
summarized_progeny_scores <- progeny_scores_df %>%
group_by(Pathway, CellType) %>%
summarise(avg = mean(Activity), std = sd(Activity))
#We prepare the data for the plot
summarized_progeny_scores_df <- summarized_progeny_scores %>%
dplyr::select(-std) %>%
spread(Pathway, avg) %>%
data.frame(row.names = "CellType", check.names = FALSE, stringsAsFactors = FALSE)
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
colorder <- c("HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum", "AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum")
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores %>%
dplyr::select(-std) %>%
spread(Pathway, avg) %>%
data.frame(row.names = "CellType", check.names = FALSE, stringsAsFactors = FALSE)
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
progeny_hmap
VlnPlot(roj_rds, group.by = "svm_annotation", split.by = "disease", features = c("STAT3"), stack = T, flip = T) + theme(axis.title.x = element_blank()) #cols = c(rep("#8DA0CB", 66))
VlnPlot(roj_rds, group.by = "svm_annotation", split.by = "disease", features = c("STAT3", "KRT15"), stack = T, flip = T) + theme(axis.title.x = element_blank()) #cols = c(rep("#8DA0CB", 66))
VlnPlot(roj_rds, group.by = "svm_annotation", split.by = "disease", features = c("CCNA"), stack = T, flip = T) + theme(axis.title.x = element_blank()) #cols = c(rep("#8DA0CB", 66))
VlnPlot(roj_rds, group.by = "svm_annotation", split.by = "disease", features = c("CCNA1", "CCNA2", "CCND1", "CCND2", "CCNE", "CDKN1A", "CDKN1B", "CDKN1C"), stack = T, flip = T) + theme(axis.title.x = element_blank()) #cols = c(rep("#8DA0CB", 66))
VlnPlot(roj_rds, group.by = "svm_annotation", split.by = "disease", features = c("CCNA1", "CCNA2", "CCND1", "CCND2", "CCNE", "CDKN1A", "CDKN1B", "CDKN1C"), stack = T, flip = T) + theme(axis.title.x = element_blank()) #cols = c(rep("#8DA0CB", 66))
VlnPlot(roj_rds, group.by = "svm_annotation", split.by = "disease", features = c("IGFBP3"), flip = T) + theme(axis.title.x = element_blank()) #cols = c(rep("#8DA0CB", 66))
VlnPlot(roj_rds, group.by = "svm_annotation", split.by = "disease", features = c("IGFBP3"), flip = T) + theme(axis.title.x = element_blank()) #cols = c(rep("#8DA0CB", 66))
features <- 2000
colorder <- c("HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum", "AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum")
pathway_order <- c("Estrogen", "MAPK", "VEGF", "EGFR", "PI3K", "Trail", "p53", "Androgen", "JAK-STAT", "WNT", "TNFa", "NFkB", "TGFb", "Hypoxia")
objectrds <- roj_rds
Idents(objectrds) <-  paste0(objectrds$disease,"_",objectrds$svm_annotation)
colorder <- x
require(progeny)
require(pheatmap)
require(tidyr)
require(tibble)
#data frame assigning identities to each cell
CellsClusters <- data.frame(
Cell = names(Idents(objectrds)),
CellType = as.character(Idents(objectrds)),
stringsAsFactors = FALSE
)
#calculation progeny, added as inactive assay to rds
objectrds <- progeny(objectrds, scale = F, organism = "Human", top = features, perm = 1, return_assay = TRUE)
#We can now directly apply Seurat functions, like scaling our Progeny scores
objectrds <- Seurat::ScaleData(objectrds, assay = "progeny")
#We transform Progeny scores into a data frame to better handling the results
progeny_scores_df <- as.data.frame(t(GetAssayData(
objectrds,
slot = "scale.data",
assay = "progeny"
))) %>%
rownames_to_column("Cell") %>%
gather(Pathway, Activity,-Cell) #transforms the table into a longer table format - assigning a separate row for every pathways + coordinating activity per cell
#We match Progeny scores with the cell clusters.
progeny_scores_df <- inner_join(progeny_scores_df, CellsClusters)
#We summarize the Progeny scores by cell population
summarized_progeny_scores <- progeny_scores_df %>%
group_by(Pathway, CellType) %>%
summarise(avg = mean(Activity), std = sd(Activity))
#We prepare the data for the plot
summarized_progeny_scores_df <- summarized_progeny_scores %>%
dplyr::select(-std) %>%
spread(Pathway, avg) %>%
data.frame(row.names = "CellType", check.names = FALSE, stringsAsFactors = FALSE)
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
# #we prepare the plot
# nr = nrow(summarized_progeny_scores_df) / 2
# df1 = summarized_progeny_scores_df[1:nr, ]
# df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
# summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
View(summarized_progeny_scores_df)
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df[colorder, ]
colorder <- c("HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum", "AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum")
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
# #we prepare the plot
# nr = nrow(summarized_progeny_scores_df) / 2
# df1 = summarized_progeny_scores_df[1:nr, ]
# df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
# summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
pathway_order <- c("Estrogen", "MAPK", "VEGF", "EGFR", "PI3K", "Trail", "p53", "Androgen", "JAK-STAT", "WNT", "TNFa", "NFkB", "TGFb", "Hypoxia")
summarized_progeny_scores_df <- summarized_progeny_scores_df[colorder, ]
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
# #we prepare the plot
# nr = nrow(summarized_progeny_scores_df) / 2
# df1 = summarized_progeny_scores_df[1:nr, ]
# df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
# summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
pathway_order <- c("Estrogen", "MAPK", "VEGF", "EGFR", "PI3K", "JAK-STAT", "TNFa", "NFkB", "Androgen", "p53", "TGFb", "WNT", "Trail", "Hypoxia")
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
pathway_order <- c("JAK-STAT", "TNFa", "NFkB", "Estrogen", "MAPK", "VEGF", "EGFR", "PI3K", "Androgen", "p53", "TGFb", "Trail", "Hypoxia", "WNT")
summarized_progeny_scores_df <- summarized_progeny_scores_df[, pathway_order, ]
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = F, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity"))
progenyfv_2 = function(objectrds, features = 2000, org = "Human", clustering = F, colorder){
objectrds <- roj_rds
Idents(objectrds) <-  paste0(objectrds$disease,"_",objectrds$svm_annotation)
colorder <- x
require(progeny)
require(pheatmap)
require(tidyr)
require(tibble)
#data frame assigning identities to each cell
CellsClusters <- data.frame(
Cell = names(Idents(objectrds)),
CellType = as.character(Idents(objectrds)),
stringsAsFactors = FALSE
)
#calculation progeny, added as inactive assay to rds
objectrds <- progeny(objectrds, scale = F, organism = org, top = features, perm = 1, return_assay = TRUE)
#We can now directly apply Seurat functions, like scaling our Progeny scores
objectrds <- Seurat::ScaleData(objectrds, assay = "progeny")
#We transform Progeny scores into a data frame to better handling the results
progeny_scores_df <- as.data.frame(t(GetAssayData(
objectrds,
slot = "scale.data",
assay = "progeny"
))) %>%
rownames_to_column("Cell") %>%
gather(Pathway, Activity,-Cell) #transforms the table into a longer table format - assigning a separate row for every pathways + coordinating activity per cell
#We match Progeny scores with the cell clusters.
progeny_scores_df <- inner_join(progeny_scores_df, CellsClusters)
#We summarize the Progeny scores by cell population
summarized_progeny_scores <- progeny_scores_df %>%
group_by(Pathway, CellType) %>%
summarise(avg = mean(Activity), std = sd(Activity))
#We prepare the data for the plot
summarized_progeny_scores_df <- summarized_progeny_scores %>%
dplyr::select(-std) %>%
spread(Pathway, avg) %>%
data.frame(row.names = "CellType", check.names = FALSE, stringsAsFactors = FALSE)
summarized_progeny_scores_df <- summarized_progeny_scores_df[order(colorder), ]
#we prepare the plot
nr = nrow(summarized_progeny_scores_df) / 2
df1 = summarized_progeny_scores_df[1:nr, ]
df2 = summarized_progeny_scores_df[(nr + 1):c(2 * nr), ]
summarized_progeny_scores_df = df1 - df2 #relative activity between two variables
paletteLength = 100
myColor = colorRampPalette(c("darkgreen", "white", "darkorange"))(paletteLength) #potentially darkblue, indianred
#to get the scale balanced and centered around 0
progenyBreaks = c(
seq(min(summarized_progeny_scores_df), 0, length.out = ceiling(paletteLength / 2) + 1),
seq(max(summarized_progeny_scores_df) / paletteLength, max(summarized_progeny_scores_df),  length.out = floor(paletteLength / 2)))
# seq creates a sequence lowest to highest number with length.out determining length of sequence
#we plot
progeny_hmap <- pheatmap(t(summarized_progeny_scores_df),
fontsize = 12, fontsize_row = 9,
cluster_rows = clustering, cluster_cols = F, angle_col = 45, treeheight_col = 0,  border_color = NA,
color = myColor, breaks = progenyBreaks,
main =  paste0("PROGENy pathway activity relative to Healthy"))
return(progeny_hmap)
}
x <- c("AD_basal III", "AD_basal II", "AD_basal I", "AD_basal IV", "AD_stratum spinosum", "AD_stratum granulosum", "HC_basal III", "HC_basal II", "HC_basal I", "HC_basal IV", "HC_stratum spinosum", "HC_stratum granulosum")
#it is important that AD all together and before HC otherwise relation is not correct / inverse
#order within AD or healthy can be as you like
Idents(roj_rds) = paste0(roj_rds$disease,"_",roj_rds$svm_annotation)
progenyfv_2(roj_rds, features = 2000, org = "Human", colorder = x, clustering = T) #result only interpretable if equal amount of AD vs HC conditions!
library(limma)
Idents(roj_rds) <- roj_rds$svm_annotation
basalIII <- subset(roj_rds, idents = "basal III")
expr <- as.matrix(GetAssayData(basalIII))
# Filter out genes that are 0 for every cell in this cluster
bad <- which(rowSums(expr) == 0)
expr <- expr[-bad,]
View(expr)
